"""Initial migrations, transaction table modified

Revision ID: 093bedfa611f
Revises: eda79dde3d36
Create Date: 2025-06-16 14:10:10.176292

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '093bedfa611f'
down_revision: Union[str, None] = 'eda79dde3d36'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions')
    op.drop_table('role')
    op.drop_table('payment_types')
    op.drop_table('purpose')
    op.drop_table('currency')
    op.drop_table('users')
    op.drop_table('payment_methods')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('payment_methods',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('payment_methods_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('method', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='payment_methods_pkey'),
    sa.UniqueConstraint('method', name='uq_payment_methods_method', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('fname', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('lname', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='fk_users_role_id_role_id'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='uq_users_email', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('phone', name='uq_users_phone', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('currency',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('currency_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('coin', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='currency_pkey'),
    sa.UniqueConstraint('coin', name='uq_currency_coin', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('purpose',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('purpose_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='purpose_pkey'),
    sa.UniqueConstraint('name', name='uq_purpose_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('payment_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('payment_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='payment_types_pkey'),
    sa.UniqueConstraint('type', name='uq_payment_types_type', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('role',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('role_desc', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='role_pkey'),
    sa.UniqueConstraint('role_desc', name='uq_role_role_desc', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('purpose_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('method_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['coin_id'], ['currency.id'], name=op.f('fk_transactions_coin_id_currency_id')),
    sa.ForeignKeyConstraint(['method_id'], ['payment_methods.id'], name=op.f('fk_transactions_method_id_payment_methods_id')),
    sa.ForeignKeyConstraint(['purpose_id'], ['purpose.id'], name=op.f('fk_transactions_purpose_id_purpose_id')),
    sa.ForeignKeyConstraint(['type_id'], ['payment_types.id'], name=op.f('fk_transactions_type_id_payment_types_id')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_transactions_user_id_users_id')),
    sa.PrimaryKeyConstraint('id', name=op.f('transactions_pkey'))
    )
    # ### end Alembic commands ###
